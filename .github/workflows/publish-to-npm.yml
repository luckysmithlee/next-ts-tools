name: Publish to npm  # 工作流名称（GitHub Actions 页面显示）

on:
  push:
    branches: [ "main" ]   # 当推送到 main 分支时触发
    tags: [ "v*" ]         # 当推送 v* 开头的标签时触发，例如 v1.0.0
  workflow_dispatch:        # 手动触发（GitHub 页面按钮）

jobs:
  publish:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境
    strategy:
      matrix:
        node-version: [20.x]  # 可以同时测试多个 Node.js 版本，这里只用 20.x

    steps:
      # ------------------------------
      # 步骤1：检出代码
      # ------------------------------
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 拉取完整的提交历史（用于生成 changelog）

      # ------------------------------
      # 步骤2：安装 Node.js 并配置 npm
      # ------------------------------
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'  # 配置 npm registry（必须）
          cache: 'npm'  # 启用缓存（加快构建）
          cache-dependency-path: package-lock.json

      # ------------------------------
      # 步骤3：安装依赖
      # ------------------------------
      - name: Install dependencies
        run: npm ci   # npm ci 更适合 CI/CD，保证 lock 文件一致
        env:
          CI: true    # 启用 CI 模式

      # ------------------------------
      # 步骤4：运行单元测试
      # ------------------------------
      - name: Run unit tests
        run: npm test
        env:
          CI: true

      # ------------------------------
      # 步骤5：自动递增版本号（仅在 main 分支）
      # - feat: → minor 版本（0.1.x → 0.2.0）
      # - fix: → patch 版本（0.1.0 → 0.1.1）
      # - 其他提交信息 → patch
      # ------------------------------
      - name: Bump version (auto)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          npm version $(node -p "const { execSync } = require('child_process'); \
            const msg = execSync('git log -1 --pretty=%B').toString().trim(); \
            if (msg.includes('feat:')) 'minor'; \
            else if (msg.includes('fix:')) 'patch'; \
            else 'patch';") \
          --no-git-tag-version
        env:
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com

      # ------------------------------
      # 步骤6：发布到 npm
      # - 使用 NODE_AUTH_TOKEN 作为认证（必须）
      # - secrets.NPM_TOKEN 在仓库 Settings → Secrets 设置
      # ------------------------------
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ------------------------------
      # 步骤7：生成 changelog（基于 commit 信息）
      # - 收集最近一次 tag 到当前提交之间的 commit
      # - 将 feat/fix 类型的 commit 分类
      # ------------------------------
      - name: Generate changelog
        id: changelog
        run: |
          # 获取最近的 tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$last_tag" ]; then
            # 如果没有 tag，则取所有 commit
            range="HEAD"
          else
            # 如果有 tag，则取该 tag 之后的 commit
            range="$last_tag..HEAD"
          fi

          echo "生成 Changelog，范围: $range"

          # 分类收集 feat 和 fix
          feats=$(git log $range --pretty=format:"- %s" | grep "^-\s*feat:" || true)
          fixes=$(git log $range --pretty=format:"- %s" | grep "^-\s*fix:" || true)

          # 拼接成最终 changelog
          changelog=""
          if [ -n "$feats" ]; then
            changelog="$changelog\n### ✨ Features\n$feats\n"
          fi
          if [ -n "$fixes" ]; then
            changelog="$changelog\n### 🐛 Fixes\n$fixes\n"
          fi

          if [ -z "$changelog" ]; then
            changelog="No significant changes."
          fi

          # 输出 changelog 给后续步骤使用
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ------------------------------
      # 步骤8：创建 GitHub Release（仅推送 tag 时触发）
      # - release 名称和 tag 一致
      # - release 内容为自动生成的 changelog
      # ------------------------------
      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动注入的 token
